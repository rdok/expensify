name: Build Deploy
env:
  NAME: expensify
  AWS_DEFAULT_REGION: us-east-1
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  BASE_DOMAIN: rdok.co.uk
on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        required: true
        description: "Allowed values: prod, test"
        default: prod
jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Yarn, Lint, Test
        run: yarn --frozen-lockfile && yarn lint && yarn test
      - name: Build
        run: yarn build:prod
      - name: Store build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build_artifacts-${{ github.sha }}
          path: |
            public
            template.yml
  deploy:
    needs: [build]
    runs-on: ubuntu-20.04
    environment:
      name: ${{ github.event.inputs.environment == '' && 'test' || github.event.inputs.environment }}
      url: "https://${{ steps.env.outputs.domain }}"
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: build_artifacts-${{ github.sha }}
      - name: Prepare environment variables
        id: env
        env:
          ENVIRONMENT: ${{ github.event.inputs.environment }}
        run: |
          ENVIRONMENT=${ENVIRONMENT:-test}
          if [ "$ENVIRONMENT" != "test" && "$ENVIRONMENT" != "prod" ]; then
            printf '%s\n' "ENVIRONMENT is not in accepted range: test, prod." >&2
            exit 1
          fi
          if [ "$ENVIRONMENT" = "test" ]; then SUBDOMAIN="test-"; fi

          echo ::set-output name=stack-name::"rdok-${ENVIRONMENT}-${NAME}"
          echo ::set-output name=domain::"${SUBDOMAIN}${NAME}.${BASE_DOMAIN}"
          echo ::set-output name=deploy-bucket::"rdokos-${ENVIRONMENT}-cicd-us-east-1"
      - name: CloudFormation Package & Deploy
        run: |
          sam package \
            --output-template-file packaged-template.yml \
            --s3-prefix "${{ steps.env.outputs.stack-name }}/packages" \
            --s3-bucket "${{ steps.env.outputs.deploy-bucket }}"
          sam deploy \
            --no-fail-on-empty-changeset \
            --s3-bucket "${{ steps.env.outputs.deploy-bucket }}" \
            --s3-prefix "${{ steps.env.outputs.stack-name }}/deployments" \
            --template-file packaged-template.yml \
            --stack-name ${{ steps.env.outputs.stack-name }} \
            --capabilities CAPABILITY_IAM \
            --parameter-overrides \
              Route53HostedZoneId=ZSY7GT2NEDPN0 \
              DomainName=${{ steps.env.outputs.domain }} \
              WildcardCertificateARN=${{ secrets.WILDCARD_CERTIFICATE_ARN }}
      - name: Website Bucket Sync
        run: |
          BUCKET_NAME=$( \
            aws cloudformation describe-stacks  \
            --stack-name ${{ steps.env.outputs.stack-name }} \
              --query 'Stacks[0].Outputs[?OutputKey==`StaticAssetsBucketName`].OutputValue' \
              --output text \
          )
          aws s3 sync ./public s3://${BUCKET_NAME} --delete
      - name: Cache Invalidation
        run: |
          DISTRIBUTION_ID=$( \
            aws cloudformation describe-stacks  \
            --stack-name ${{ steps.env.outputs.stack-name }} \
            --query 'Stacks[0].Outputs[?OutputKey==`DistributionID`].OutputValue' \
            --output text \
          )
          aws cloudfront create-invalidation \
            --distribution-id "$DISTRIBUTION_ID" \
            --paths "/*"
